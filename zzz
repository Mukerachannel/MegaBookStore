<?php
require_once 'config.php';
require_once 'functions.php';

/**
 * Chapa Payment Gateway Integration Class
 */
class ChapaPayment {
    private $secretKey;
    private $apiUrl;
    private $verifyUrl;
    private $callbackUrl;
    private $returnUrl;
    
    /**
     * Constructor
     */
    public function __construct() {
        $this->secretKey = CHAPA_SECRET_KEY;
        $this->apiUrl = CHAPA_API_URL;
        $this->verifyUrl = CHAPA_VERIFY_URL;
        $this->callbackUrl = CHAPA_CALLBACK_URL;
        $this->returnUrl = CHAPA_RETURN_URL;
    }
    
    /**
     * Initialize a payment
     * 
     * @param array $paymentData Payment data
     * @return array Response from Chapa API
     */
    public function initialize($paymentData) {
        // Log the initialization attempt
        log_payment_activity('chapa', $paymentData['tx_ref'], 'initialize', $paymentData);
        
        // Prepare the request data
        $data = [
            'amount' => $paymentData['amount'],
            'currency' => $paymentData['currency'] ?? 'ETB',
            'email' => $paymentData['email'],
            'first_name' => $paymentData['first_name'],
            'last_name' => $paymentData['last_name'],
            'tx_ref' => $paymentData['tx_ref'],
            'callback_url' => $this->callbackUrl,
            'return_url' => $this->returnUrl . '?tx_ref=' . $paymentData['tx_ref'],
            'customization' => [
                'title' => $paymentData['title'] ?? 'Mega Books Payment',
                'description' => $paymentData['description'] ?? 'Payment for your order'
            ]
        ];
        
        // Add phone number if provided
        if (isset($paymentData['phone_number'])) {
            $data['phone_number'] = $paymentData['phone_number'];
        }
        
        // Make the API request
        $response = $this->makeRequest('/transaction/initialize', $data);
        
        // Log the response
        log_payment_activity('chapa', $paymentData['tx_ref'], 'initialize_response', $response);
        
        return $response;
    }
    
    /**
     * Verify a payment
     * 
     * @param string $txRef Transaction reference
     * @return array Response from Chapa API
     */
    public function verify($txRef) {
        // Log the verification attempt
        log_payment_activity('chapa', $txRef, 'verify', ['tx_ref' => $txRef]);
        
        // Make the API request
        $response = $this->makeRequest($this->verifyUrl . $txRef, [], 'GET');
        
        // Log the response
        log_payment_activity('chapa', $txRef, 'verify_response', $response);
        
        return $response;
    }
    
    /**
     * Make an API request to Chapa
     * 
     * @param string $endpoint API endpoint
     * @param array $data Request data
     * @param string $method HTTP method (GET, POST)
     * @return array Response from Chapa API
     */
    private function makeRequest($endpoint, $data = [], $method = 'POST') {
        $url = $method === 'GET' ? $endpoint : $this->apiUrl . $endpoint;
        
        $curl = curl_init();
        
        $options = [
            CURLOPT_URL => $url,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => '',
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => $method,
            CURLOPT_HTTPHEADER => [
                'Authorization: Bearer ' . $this->secretKey,
                'Content-Type: application/json'
            ],
        ];
        
        if ($method === 'POST' && !empty($data)) {
            $options[CURLOPT_POSTFIELDS] = json_encode($data);
        }
        
        curl_setopt_array($curl, $options);
        
        $response = curl_exec($curl);
        $err = curl_error($curl);
        
        curl_close($curl);
        
        if ($err) {
            return ['success' => false, 'message' => 'cURL Error: ' . $err];
        }
        
        return json_decode($response, true);
    }
}
?>
chaapa.php


<?php
require_once 'config.php';
require_once 'functions.php';
require_once 'chapa.php';

// Get the request body
$input = file_get_contents('php://input');

// Log the callback
log_payment_activity('chapa', 'callback', 'received', ['raw_data' => $input]);

// Validate the input
if (!is_valid_json($input)) {
    http_response_code(400);
    echo json_encode(['status' => 'error', 'message' => 'Invalid JSON data']);
    exit;
}

// Parse the JSON data
$data = json_decode($input, true);

// Check if required fields are present
if (!isset($data['tx_ref']) || !isset($data['status'])) {
    http_response_code(400);
    echo json_encode(['status' => 'error', 'message' => 'Missing required fields']);
    exit;
}

// Extract transaction reference and status
$tx_ref = sanitize_input($data['tx_ref']);
$status = strtolower(sanitize_input($data['status']));

// Verify the payment with Chapa API
$chapa = new ChapaPayment();
$verification = $chapa->verify($tx_ref);

// Log the verification result
log_payment_activity('chapa', $tx_ref, 'verification', $verification);

// Check if verification was successful
if (isset($verification['status']) && $verification['status'] == 'success') {
    // Get the order ID for this transaction
    $stmt = $conn->prepare("SELECT order_id FROM chapa_transactions WHERE tx_ref = ?");
    $stmt->bind_param("s", $tx_ref);
    $stmt->execute();
    $result = $stmt->get_result();
    
    if ($result->num_rows > 0) {
        $row = $result->fetch_assoc();
        $order_id = $row['order_id'];
        
        // Update Chapa transaction status
        update_chapa_transaction($tx_ref, 'success', $input);
        
        // Update order status
        $stmt = $conn->prepare("UPDATE orders SET payment_status = 'paid', status = 'processing', updated_at = CURRENT_TIMESTAMP WHERE id = ?");
        $stmt->bind_param("i", $order_id);
        $stmt->execute();
        
        // Update payment transaction
        update_payment_transaction($tx_ref, 'completed', $input);
        
        // Send payment confirmation email
        send_payment_confirmation_email($order_id);
        
        // Send success response
        http_response_code(200);
        echo json_encode(['status' => 'success', 'message' => 'Payment verified and order updated']);
    } else {
        // Transaction not found
        log_payment_activity('chapa', $tx_ref, 'error', ['message' => 'Transaction not found']);
        http_response_code(404);
        echo json_encode(['status' => 'error', 'message' => 'Transaction not found']);
    }
} else {
    // Verification failed
    update_chapa_transaction($tx_ref, 'failed', $input);
    update_payment_transaction($tx_ref, 'failed', $input);
    
    log_payment_activity('chapa', $tx_ref, 'verification_failed', $verification);
    http_response_code(400);
    echo json_encode(['status' => 'error', 'message' => 'Payment verification failed']);
}
?>
chaapa callback

<?php
session_start();
require_once 'config.php';
require_once 'functions.php';
require_once 'chapa.php';

// Check if user is logged in
if (!isset($_SESSION['user_id'])) {
    $_SESSION['error'] = "Please login to continue with checkout.";
    header('Location: login.php');
    exit;
}

// Check if cart is empty
if (!isset($_SESSION['cart']) || empty($_SESSION['cart'])) {
    $_SESSION['error'] = "Your cart is empty.";
    header('Location: cart.php');
    exit;
}

// Check if shipping address is provided
if (!isset($_POST['shipping_address']) || empty($_POST['shipping_address'])) {
    $_SESSION['error'] = "Shipping address is required.";
    header('Location: payment.php');
    exit;
}

// Get user information
$user_id = $_SESSION['user_id'];
$user = get_user_by_id($user_id);

if (!$user) {
    $_SESSION['error'] = "User not found.";
    header('Location: payment.php');
    exit;
}

// Sanitize inputs
$shipping_address = sanitize_input($_POST['shipping_address']);
$shipping_phone = sanitize_input($_POST['shipping_phone'] ?? $user['phone']);
$shipping_name = sanitize_input($_POST['shipping_name'] ?? $user['fullname']);
$payment_method = 'chapa';

// Calculate cart total
$total_amount = 0;
foreach ($_SESSION['cart'] as $item) {
    if ($item['order_type'] === 'buy') {
        $total_amount += $item['price'] * $item['quantity'];
    } else {
        $total_amount += $item['rent_price'] * $item['rent_days'] * $item['quantity'];
    }
}

// Start transaction
$conn->begin_transaction();

try {
    // Create order
    $stmt = $conn->prepare("INSERT INTO orders (customer_id, total_amount, status, shipping_address, shipping_phone, shipping_name, payment_method, payment_status) VALUES (?, ?, 'pending', ?, ?, ?, ?, 'pending')");
    $stmt->bind_param("idssss", $user_id, $total_amount, $shipping_address, $shipping_phone, $shipping_name, $payment_method);
    $stmt->execute();
    
    $order_id = $conn->insert_id;
    
    // Insert order items
    foreach ($_SESSION['cart'] as $item) {
        $book_id = $item['id'];
        $quantity = $item['quantity'];
        $is_rental = $item['order_type'] === 'rent' ? 1 : 0;
        $rental_days = $is_rental ? $item['rent_days'] : null;
        
        // Calculate price based on order type
        if ($is_rental) {
            $price = $item['rent_price'] * $item['rent_days'];
            $return_date = date('Y-m-d', strtotime("+{$rental_days} days"));
        } else {
            $price = $item['price'];
            $return_date = null;
        }
        
        $stmt = $conn->prepare("INSERT INTO order_items (order_id, book_id, quantity, price, is_rental, rental_days, return_date) VALUES (?, ?, ?, ?, ?, ?, ?)");
        $stmt->bind_param("iiidiis", $order_id, $book_id, $quantity, $price, $is_rental, $rental_days, $return_date);
        $stmt->execute();
        
        // Update book stock
        $stmt = $conn->prepare("UPDATE books SET stock = stock - ? WHERE id = ?");
        $stmt->bind_param("ii", $quantity, $book_id);
        $stmt->execute();
    }
    
    // Generate transaction reference
    $tx_ref = 'MEGABOOKS-' . $order_id . '-' . time();
    
    // Prepare Chapa payment data
    $first_name = explode(' ', $user['fullname'])[0];
    $last_name = substr($user['fullname'], strlen($first_name) + 1);
    
    if (empty($last_name)) {
        $last_name = 'Customer';
    }
    
    $paymentData = [
        'amount' => $total_amount,
        'currency' => 'ETB',
        'email' => $user['email'],
        'first_name' => $first_name,
        'last_name' => $last_name,
        'phone_number' => $shipping_phone,
        'tx_ref' => $tx_ref,
        'title' => 'Mega Books Order #' . $order_id,
        'description' => 'Payment for your book order'
    ];
    
    // Initialize Chapa payment
    $chapa = new ChapaPayment();
    $response = $chapa->initialize($paymentData);
    
    if (isset($response['status']) && $response['status'] == 'success') {
        // Save Chapa transaction
        $checkout_url = $response['data']['checkout_url'];
        create_chapa_transaction($order_id, $tx_ref, $total_amount, $checkout_url);
        
        // Create payment transaction record
        create_payment_transaction($order_id, $tx_ref, 'chapa', $total_amount, 'pending', $response);
        
        // Commit transaction
        $conn->commit();
        
        // Clear cart
        $_SESSION['cart'] = [];
        
        // Redirect to Chapa checkout
        header('Location: ' . $checkout_url);
        exit;
    } else {
        // Payment initialization failed
        $conn->rollback();
        
        $error_message = isset($response['message']) ? $response['message'] : 'Failed to initialize payment';
        $_SESSION['error'] = "Payment Error: " . $error_message;
        header('Location: payment.php');
        exit;
    }
} catch (Exception $e) {
    // Rollback transaction on error
    $conn->rollback();
    
    $_SESSION['error'] = "Error: " . $e->getMessage();
    header('Location: payment.php');
    exit;
}
?>
 initialize chaapa

 <?php
session_start();
require_once 'config.php';
require_once 'functions.php';

// Check if transaction reference is provided
$tx_ref = isset($_GET['tx_ref']) ? sanitize_input($_GET['tx_ref']) : null;
$order_id = isset($_GET['order_id']) ? (int)$_GET['order_id'] : null;

// If neither transaction reference nor order ID is provided, redirect to home
if (!$tx_ref && !$order_id) {
    header('Location: index.php');
    exit;
}

// Get order details
if ($tx_ref) {
    // Get order ID from transaction reference
    $stmt = $conn->prepare("SELECT order_id FROM chapa_transactions WHERE tx_ref = ?");
    $stmt->bind_param("s", $tx_ref);
    $stmt->execute();
    $result = $stmt->get_result();
    
    if ($result->num_rows > 0) {
        $row = $result->fetch_assoc();
        $order_id = $row['order_id'];
    } else {
        // Try telebirr transactions
        $stmt = $conn->prepare("SELECT order_id FROM telebirr_transactions WHERE out_trade_no = ?");
        $stmt->bind_param("s", $tx_ref);
        $stmt->execute();
        $result = $stmt->get_result();
        
        if ($result->num_rows > 0) {
            $row = $result->fetch_assoc();
            $order_id = $row['order_id'];
        }
    }
}

if (!$order_id) {
    $_SESSION['error'] = "Order not found.";
    header('Location: index.php');
    exit;
}

// Get order details
$order = get_order_by_id($order_id);
if (!$order) {
    $_SESSION['error'] = "Order not found.";
    header('Location: index.php');
    exit;
}

// Get order items
$order_items = get_order_items($order_id);

// Include header
include 'header.php';
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Payment Success - Mega Book Store</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="css/style.css">
    <style>
        .success-container {
            max-width: 800px;
            margin: 50px auto;
            padding: 30px;
            background-color: white;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
            text-align: center;
        }
        
        .success-icon {
            font-size: 80px;
            color: #28a745;
            margin-bottom: 20px;
        }
        
        .success-title {
            font-size: 28px;
            margin-bottom: 10px;
            color: #333;
        }
        
        .success-message {
            font-size: 18px;
            color: #666;
            margin-bottom: 30px;
        }
        
        .order-details {
            background-color: #f8f9fa;
            padding: 20px;
            border-radius: 5px;
            margin-bottom: 30px;
            text-align: left;
        }
        
        .order-details-title {
            font-size: 20px;
            font-weight: bold;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 1px solid #ddd;
        }
        
        .order-info {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            margin-bottom: 20px;
        }
        
        .order-info-item {
            flex: 1;
            min-width: 200px;
        }
        
        .order-info-label {
            font-weight: bold;
            margin-bottom: 5px;
            color: #666;
        }
        
        .order-info-value {
            font-size: 16px;
        }
        
        .order-items {
            margin-top: 20px;
        }
        
        .order-items-title {
            font-weight: bold;
            margin-bottom: 10px;
        }
        
        .order-item {
            display: flex;
            align-items: center;
            padding: 10px 0;
            border-bottom: 1px solid #eee;
        }
        
        .order-item-image {
            width: 60px;
            height: 80px;
            object-fit: cover;
            margin-right: 15px;
        }
        
        .order-item-details {
            flex: 1;
        }
        
        .order-item-title {
            font-weight: bold;
            margin-bottom: 5px;
        }
        
        .order-item-author {
            color: #666;
            font-size: 14px;
            margin-bottom: 5px;
        }
        
        .order-item-price {
            color: #333;
        }
        
        .order-item-quantity {
            margin-left: 20px;
            color: #666;
        }
        
        .action-buttons {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-top: 30px;
        }
        
        .btn {
            display: inline-block;
            padding: 12px 25px;
            background-color: #007bff;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            font-size: 16px;
            transition: all 0.3s ease;
        }
        
        .btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }
        
        .btn-primary {
            background-color: #007bff;
        }
        
        .btn-success {
            background-color: #28a745;
        }
        
        .payment-status {
            display: inline-block;
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 14px;
            font-weight: bold;
            margin-top: 10px;
        }
        
        .payment-status.paid {
            background-color: #d4edda;
            color: #155724;
        }
        
        .payment-status.pending {
            background-color: #fff3cd;
            color: #856404;
        }
        
        .payment-status.failed {
            background-color: #f8d7da;
            color: #721c24;
        }
    </style>
</head>
<body>
    <div class="success-container">
        <i class="fas fa-check-circle success-icon"></i>
        <h1 class="success-title">Order Placed Successfully!</h1>
        <p class="success-message">Thank you for your order. We'll process it right away.</p>
        
        <div class="order-details">
            <div class="order-details-title">Order Details</div>
            <div class="order-info">
                <div class="order-info-item">
                    <div class="order-info-label">Order Number:</div>
                    <div class="order-info-value">#<?php echo $order_id; ?></div>
                </div>
                <div class="order-info-item">
                    <div class="order-info-label">Order Date:</div>
                    <div class="order-info-value"><?php echo date('F j, Y', strtotime($order['order_date'])); ?></div>
                </div>
                <div class="order-info-item">
                    <div class="order-info-label">Payment Method:</div>
                    <div class="order-info-value"><?php echo ucfirst($order['payment_method']); ?></div>
                </div>
                <div class="order-info-item">
                    <div class="order-info-label">Payment Status:</div>
                    <div class="order-info-value">
                        <span class="payment-status <?php echo $order['payment_status']; ?>">
                            <?php echo ucfirst($order['payment_status']); ?>
                        </span>
                    </div>
                </div>
            </div>
            
            <div class="order-items">
                <div class="order-items-title">Order Items:</div>
                <?php foreach ($order_items as $item): ?>
                    <div class="order-item">
                        <img src="<?php echo htmlspecialchars($item['image']); ?>" alt="<?php echo htmlspecialchars($item['title']); ?>" class="order-item-image">
                        <div class="order-item-details">
                            <div class="order-item-title"><?php echo htmlspecialchars($item['title']); ?></div>
                            <div class="order-item-author">by <?php echo htmlspecialchars($item['author']); ?></div>
                            <div class="order-item-price">ETB <?php echo number_format($item['price'], 2); ?></div>
                        </div>
                        <div class="order-item-quantity">x<?php echo $item['quantity']; ?></div>
                    </div>
                <?php endforeach; ?>
            </div>
            
            <div class="order-total" style="text-align: right; margin-top: 20px; font-weight: bold; font-size: 18px;">
                Total: ETB <?php echo number_format($order['total_amount'], 2); ?>
            </div>
        </div>
        
        <div class="action-buttons">
            <a href="explore.php" class="btn btn-primary">Continue Shopping</a>
            <a href="customer_dashboard.php" class="btn btn-success">View My Orders</a>
        </div>
    </div>
    
    <?php include 'footer.php'; ?>
</body>
</html>
 payment sucess

 <?php
session_start();
require_once 'config.php';
require_once 'functions.php';

// Check if user is logged in
if (!isset($_SESSION['user_id'])) {
    $_SESSION['error'] = "Please login to continue with checkout.";
    header('Location: login.php?redirect=payment.php');
    exit;
}

// Check if cart is empty
if (!isset($_SESSION['cart']) || empty($_SESSION['cart'])) {
    $_SESSION['error'] = "Your cart is empty.";
    header('Location: cart.php');
    exit;
}

// Get user information
$user_id = $_SESSION['user_id'];
$user = get_user_by_id($user_id);

if (!$user) {
    $_SESSION['error'] = "User not found.";
    header('Location: login.php');
    exit;
}

// Calculate cart total
$cart_total = 0;
$cart_items_count = 0;

foreach ($_SESSION['cart'] as $item) {
    if ($item['order_type'] === 'buy') {
        $cart_total += $item['price'] * $item['quantity'];
    } else {
        $cart_total += $item['rent_price'] * $item['rent_days'] * $item['quantity'];
    }
    
    $cart_items_count += $item['quantity'];
}

// Include header
include 'header.php';
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Payment - Mega Book Store</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="css/style.css">
    <style>
        .payment-container {
            max-width: 1200px;
            margin: 30px auto;
            padding: 20px;
            display: flex;
            flex-wrap: wrap;
            gap: 30px;
        }
        
        .payment-methods {
            flex: 2;
            min-width: 300px;
        }
        
        .order-summary {
            flex: 1;
            min-width: 300px;
            background-color: #f8f9fa;
            padding: 20px;
            border-radius: 5px;
        }
        
        .payment-header {
            text-align: center;
            margin-bottom: 30px;
        }
        
        .payment-option {
            background-color: white;
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 20px;
            margin-bottom: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .payment-option:hover {
            border-color: #007bff;
        }
        
        .payment-option.selected {
            border-color: #007bff;
            background-color: #f0f7ff;
        }
        
        .payment-option-header {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
        }
        
        .payment-option-radio {
            margin-right: 15px;
        }
        
        .payment-option-title {
            font-size: 18px;
            font-weight: bold;
        }
        
        .payment-option-description {
            color: #666;
            margin-bottom: 15px;
        }
        
        .payment-form {
            display: none;
            margin-top: 15px;
            padding-top: 15px;
            border-top: 1px solid #ddd;
        }
        
        .payment-form.active {
            display: block;
        }
        
        .form-group {
            margin-bottom: 15px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        
        .form-group input, .form-group textarea {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
        }
        
        .summary-title {
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 1px solid #ddd;
        }
        
        .summary-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }
        
        .summary-row.total {
            font-weight: bold;
            font-size: 18px;
            border-top: 1px solid #ddd;
            padding-top: 10px;
            margin-top: 10px;
        }
        
        .btn {
            display: inline-block;
            padding: 10px 20px;
            background-color: #007bff;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            border: none;
            cursor: pointer;
            font-size: 16px;
            width: 100%;
            text-align: center;
            margin-top: 20px;
        }
        
        .btn-success {
            background-color: #28a745;
        }
        
        .shipping-info {
            margin-bottom: 30px;
        }
        
        .shipping-info-title {
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 15px;
        }
        
        .shipping-form {
            background-color: white;
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 20px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="payment-header">
            <h1>Checkout</h1>
            <p>Complete your purchase by providing shipping information and selecting a payment method</p>
        </div>
        
        <?php if (isset($_SESSION['success'])): ?>
            <div class="alert alert-success">
                <?php 
                    echo $_SESSION['success']; 
                    unset($_SESSION['success']);
                ?>
            </div>
        <?php endif; ?>
        
        <?php if (isset($_SESSION['error'])): ?>
            <div class="alert alert-danger">
                <?php 
                    echo $_SESSION['error']; 
                    unset($_SESSION['error']);
                ?>
            </div>
        <?php endif; ?>
        
        <?php if (isset($_SESSION['warning'])): ?>
            <div class="alert alert-warning">
                <?php 
                    echo $_SESSION['warning']; 
                    unset($_SESSION['warning']);
                ?>
            </div>
        <?php endif; ?>
        
        <div class="payment-container">
            <div class="payment-methods">
                <div class="shipping-info">
                    <div class="shipping-info-title">Shipping Information</div>
                    <div class="shipping-form">
                        <form id="shipping-form">
                            <div class="form-group">
                                <label for="shipping_name">Full Name</label>
                                <input type="text" id="shipping_name" name="shipping_name" value="<?php echo htmlspecialchars($user['fullname']); ?>" required>
                            </div>
                            <div class="form-group">
                                <label for="shipping_phone">Phone Number</label>
                                <input type="tel" id="shipping_phone" name="shipping_phone" value="<?php echo htmlspecialchars($user['phone']); ?>" required>
                            </div>
                            <div class="form-group">
                                <label for="shipping_address">Shipping Address</label>
                                <textarea id="shipping_address" name="shipping_address" rows="3" required><?php echo htmlspecialchars($user['address'] ?? ''); ?></textarea>
                            </div>
                        </form>
                    </div>
                </div>
                
                <div class="payment-info-title">Payment Method</div>
                
                <div class="payment-option" onclick="selectPaymentMethod('telebirr')">
                    <div class="payment-option-header">
                        <input type="radio" name="payment_method" value="telebirr" id="telebirr" class="payment-option-radio">
                        <div class="payment-option-title">Telebirr</div>
                    </div>
                    <div class="payment-option-description">
                        Pay using your Telebirr mobile wallet. Fast, secure, and convenient.
                    </div>
                    <div id="telebirr-form" class="payment-form">
                        <div class="form-group">
                            <label for="mobile_number">Telebirr Mobile Number</label>
                            <input type="tel" id="mobile_number" name="mobile_number" placeholder="e.g., 0912345678" required>
                        </div>
                        <div class="form-group">
                            <label for="payment_note">Additional Information (Optional)</label>
                            <input type="text" id="payment_note" name="payment_note" placeholder="Any additional information">
                        </div>
                    </div>
                </div>
                
                <div class="payment-option" onclick="selectPaymentMethod('chapa')">
                    <div class="payment-option-header">
                        <input type="radio" name="payment_method" value="chapa" id="chapa" class="payment-option-radio">
                        <div class="payment-option-title">Chapa Payment Gateway</div>
                    </div>
                    <div class="payment-option-description">
                        Pay securely with Chapa. Supports multiple payment methods including credit/debit cards, mobile money, and more.
                    </div>
                    <div id="chapa-form" class="payment-form">
                        <p>You will be redirected to Chapa's secure payment page to complete your payment.</p>
                    </div>
                </div>
            </div>
            
            <div class="order-summary">
                <div class="summary-title">Order Summary</div>
                <div class="summary-row">
                    <span>Items (<?php echo $cart_items_count; ?>):</span>
                    <span>ETB <?php echo number_format($cart_total, 2); ?></span>
                </div>
                <div class="summary-row total">
                    <span>Total:</span>
                    <span>ETB <?php echo number_format($cart_total, 2); ?></span>
                </div>
                
                <button type="button" class="btn btn-success" onclick="placeOrder()">Place Order</button>
            </div>
        </div>
    </div>
    
    <script>
        // Payment method selection
        function selectPaymentMethod(method) {
            // Update radio button
            document.getElementById(method).checked = true;
            
            // Update selected class
            document.querySelectorAll('.payment-option').forEach(option => {
                option.classList.remove('selected');
            });
            document.querySelector(`input[value="${method}"]`).closest('.payment-option').classList.add('selected');
            
            // Show appropriate payment form
            document.querySelectorAll('.payment-form').forEach(form => {
                form.classList.remove('active');
            });
            document.getElementById(`${method}-form`).classList.add('active');
        }
        
        // Place order
        function placeOrder() {
            // Get selected payment method
            const paymentMethod = document.querySelector('input[name="payment_method"]:checked');
            
            if (!paymentMethod) {
                alert('Please select a payment method');
                return;
            }
            
            // Get shipping information
            const shippingName = document.getElementById('shipping_name').value;
            const shippingPhone = document.getElementById('shipping_phone').value;
            const shippingAddress = document.getElementById('shipping_address').value;
            
            // Validate shipping information
            if (!shippingName || !shippingPhone || !shippingAddress) {
                alert('Please fill in all shipping information');
                return;
            }
            
            // Create form for submission
            const form = document.createElement('form');
            form.method = 'POST';
            form.action = paymentMethod.value === 'telebirr' ? 'initialize_telebirr.php' : 'initialize_chapa.php';
            
            // Add shipping information
            const addField = (name, value) => {
                const input = document.createElement('input');
                input.type = 'hidden';
                input.name = name;
                input.value = value;
                form.appendChild(input);
            };
            
            addField('shipping_name', shippingName);
            addField('shipping_phone', shippingPhone);
            addField('shipping_address', shippingAddress);
            
            // Add payment method specific fields
            if (paymentMethod.value === 'telebirr') {
                const mobileNumber = document.getElementById('mobile_number').value;
                const paymentNote = document.getElementById('payment_note').value;
                
                if (!mobileNumber) {
                    alert('Please enter your Telebirr mobile number');
                    return;
                }
                
                addField('mobile_number', mobileNumber);
                addField('payment_note', paymentNote);
            }
            
            // Submit the form
            document.body.appendChild(form);
            form.submit();
        }
        
        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            // Select Telebirr by default
            selectPaymentMethod('telebirr');
        });
    </script>
    
    <?php include 'footer.php'; ?>
</body>
</html>
   payment


   <?php
require_once 'config.php';
require_once 'functions.php';

/**
 * TelebirrPayment class for handling Telebirr payment integration
 */
class TelebirrPayment {
    private $appId;
    private $appKey;
    private $publicKey;
    private $shortCode;
    private $apiUrl;
    private $notifyUrl;
    private $returnUrl;
    private $timeout;
    
    /**
     * Constructor
     */
    public function __construct() {
        $this->appId = TELEBIRR_APP_ID;
        $this->appKey = TELEBIRR_APP_KEY;
        $this->publicKey = TELEBIRR_PUBLIC_KEY;
        $this->shortCode = TELEBIRR_SHORT_CODE;
        $this->apiUrl = TELEBIRR_API_URL;
        $this->notifyUrl = TELEBIRR_NOTIFY_URL;
        $this->returnUrl = TELEBIRR_RETURN_URL;
        $this->timeout = TELEBIRR_TIMEOUT;
    }
    
    /**
     * Initialize payment
     * 
     * @param string $outTradeNo Transaction reference
     * @param float $amount Amount to pay
     * @param string $subject Payment subject
     * @param string $receiveName Receiver name
     * @return array|bool Payment data or false on failure
     */
    public function initializePayment($outTradeNo, $amount, $subject, $receiveName) {
        // Prepare the request data
        $requestData = [
            'appId' => $this->appId,
            'notifyUrl' => $this->notifyUrl,
            'returnUrl' => $this->returnUrl,
            'subject' => $subject,
            'outTradeNo' => $outTradeNo,
            'timeoutExpress' => $this->timeout . 'm',
            'totalAmount' => $amount,
            'shortCode' => $this->shortCode,
            'receiveName' => $receiveName,
            'nonce' => $this->generateNonce(),
            'timestamp' => time() * 1000, // Milliseconds
        ];
        
        // Log the request data
        log_payment_activity('telebirr', $outTradeNo, 'initialize', $requestData);
        
        // Encrypt the request data
        $encryptedData = $this->encryptData(json_encode($requestData));
        
        // Prepare the final request
        $finalRequest = [
            'appId' => $this->appId,
            'encryptedData' => $encryptedData,
            'sign' => hash('sha256', json_encode($requestData) . $this->appKey),
            'ussd' => 'true', // Set to true to get USSD code
        ];
        
        // Send the request to Telebirr API
        $response = $this->sendRequest($this->apiUrl, $finalRequest);
        
        // Log the response
        log_payment_activity('telebirr', $outTradeNo, 'initialize_response', $response);
        
        if (!$response) {
            return false;
        }
        
        // Parse the response
        $responseData = json_decode($response, true);
        
        if (!$responseData || !isset($responseData['code']) || $responseData['code'] != '0') {
            error_log("Telebirr API Error: " . ($responseData['message'] ?? 'Unknown error'));
            return false;
        }
        
        // Return the payment data
        return [
            'out_trade_no' => $outTradeNo,
            'ussd_code' => $responseData['data']['ussd'] ?? '',
            'web_url' => $responseData['data']['toPayUrl'] ?? '',
            'timeout' => $this->timeout * 60, // Convert to seconds
            'response' => $response,
        ];
    }
    
    /**
     * Query payment status
     * 
     * @param string $outTradeNo Transaction reference
     * @return array|bool Payment status data or false on failure
     */
    public function queryPayment($outTradeNo) {
        // Prepare the request data
        $requestData = [
            'appId' => $this->appId,
            'outTradeNo' => $outTradeNo,
            'nonce' => $this->generateNonce(),
            'timestamp' => time() * 1000, // Milliseconds
        ];
        
        // Log the request data
        log_payment_activity('telebirr', $outTradeNo, 'query', $requestData);
        
        // Encrypt the request data
        $encryptedData = $this->encryptData(json_encode($requestData));
        
        // Prepare the final request
        $finalRequest = [
            'appId' => $this->appId,
            'encryptedData' => $encryptedData,
            'sign' => hash('sha256', json_encode($requestData) . $this->appKey),
        ];
        
        // Send the request to Telebirr API
        $response = $this->sendRequest($this->apiUrl . 'query', $finalRequest);
        
        // Log the response
        log_payment_activity('telebirr', $outTradeNo, 'query_response', $response);
        
        if (!$response) {
            return false;
        }
        
        // Parse the response
        $responseData = json_decode($response, true);
        
        if (!$responseData || !isset($responseData['code']) || $responseData['code'] != '0') {
            error_log("Telebirr Query API Error: " . ($responseData['message'] ?? 'Unknown error'));
            return false;
        }
        
        // Return the payment status data
        return [
            'trade_status' => $responseData['data']['tradeStatus'] ?? '',
            'is_success' => ($responseData['data']['tradeStatus'] ?? '') == 'SUCCESS',
            'response' => $response,
        ];
    }
    
    /**
     * Generate a random nonce
     * 
     * @return string Random nonce
     */
    private function generateNonce() {
        return generate_random_string(32);
    }
    
    /**
     * Encrypt data using the public key
     * 
     * @param string $data Data to encrypt
     * @return string Encrypted data
     */
    private function encryptData($data) {
        // Base64 encode the data
        $base64Data = base64_encode($data);
        
        // Encrypt using the public key
        $encryptedData = '';
        openssl_public_encrypt($base64Data, $encryptedData, $this->publicKey);
        
        // Base64 encode the encrypted data
        return base64_encode($encryptedData);
    }
    
    /**
     * Send request to Telebirr API
     * 
     * @param string $url API URL
     * @param array $data Request data
     * @return string|bool Response or false on failure
     */
    private function sendRequest($url, $data) {
        $ch = curl_init($url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
        curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
        
        $response = curl_exec($ch);
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        curl_close($ch);
        
        if ($httpCode != 200) {
            error_log("Telebirr API Error: HTTP Code " . $httpCode);
            return false;
        }
        
        return $response;
    }
}
?>
  telebirr